package assignment10.junit;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import  org.junit.AfterClass;

public class BoardTest {

	private final ByteArrayOutputStream out = new ByteArrayOutputStream();
	@Before
	public void setUpStreams()
	{
		System.setOut(new PrintStream(out));		
	}
	
	@Test
	public void testBoard_move() {
		Board test = new Board(8);
		test.Board_move(3, 3, test.array_p[16]);
		assertEquals("Invalid move_1\n", out.toString());//return value -- modify
	}

	@Test
	public void testBoard_can_move() {
		Board test = new Board(8);
		//boolean result = test.Board_can_move(0, 4, Board.array_p[16]);
		//assertEquals(true, result); //white pawn can move
		boolean result_3 = test.Board_can_move(0, 5, Board.array_p[0]);
		assertEquals(false, result_3); //white should move first
		boolean result_2 = test.Board_can_move(0, 5, Board.array_p[24]);
		assertEquals(false, result_2); //rook cannot leap over
		boolean result_4 = test.Board_can_move(2, 5, Board.array_p[25]);
		assertEquals(true, result_4); //knight can leap over
		boolean result_5 = test.Board_can_move(10, 10, Board.array_p[25]);
		assertEquals(false, result_5); //out of the board
		
	}

	@Test
	public void testWin() {
		Board test = new Board(8);
		test.Board_move(0, 4, test.array_p[16]);
		test.Board_move(4, 3, test.array_p[4]);
		test.Board_move(0, 5, test.array_p[24]);
		test.Board_move(4, 5, test.array_p[4]);
		test.Board_move(3, 5, test.array_p[24]);
		test.Board_move(4, 6, test.array_p[4]);
		test.Board_move(4, 5, test.array_p[24]);
		test.Board_move(0, 2, test.array_p[0]);
		test.Board_move(4, 0, test.array_p[24]);
		assertEquals("White Wins!\n", out.toString());
	}

	@After
	public void cleanUpStreams()
	{
		System.setOut(null);
	}
}
